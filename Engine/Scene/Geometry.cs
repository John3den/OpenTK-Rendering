using OpenTK.Audio.OpenAL.Extensions.Creative.EFX;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Engine
{
    public struct Geometry
    {
        public readonly float[] SplitVertices = 
        {
            -0.5f, -0.5f, -0.5f, 0,0,-1,
             -0.17f, -0.5f, -0.5f, 0,0,-1,
             -0.17f,  0.5f, -0.5f, 0,0,-1,
            -0.5f,  0.5f, -0.5f, 0,0,-1,

            -0.17f, -0.5f, -0.5f, 0,0,-1,
             0.17f, -0.5f, -0.5f, 0,0,-1,
             0.17f,  0.5f, -0.5f, 0,0,-1,
            -0.17f,  0.5f, -0.5f, 0,0,-1,

            0.17f, -0.5f, -0.5f, 0,0,-1,
             0.5f, -0.5f, -0.5f, 0,0,-1,
             0.5f,  0.5f, -0.5f, 0,0,-1,
            0.17f,  0.5f, -0.5f, 0,0,-1,


            -0.5f, -0.5f,  0.5f,  0,0,1,
             -0.17f, -0.5f,  0.5f,  0,0,1,
             -0.17f,  0.5f,  0.5f,  0,0,1,
            -0.5f,  0.5f,  0.5f,  0,0,1,

             -0.17f, -0.5f,  0.5f,  0,0,1,
             0.17f, -0.5f,  0.5f,  0,0,1,
             0.17f,  0.5f,  0.5f,  0,0,1,
            -0.17f,  0.5f,  0.5f,  0,0,1,

             0.17f, -0.5f,  0.5f,  0,0,1,
             0.5f, -0.5f,  0.5f,  0,0,1,
             0.5f,  0.5f,  0.5f,  0,0,1,
            0.17f,  0.5f,  0.5f,  0,0,1,


            -0.5f,  -0.17f,  0.5f,  -1,0,0,
            -0.5f,  -0.17f, -0.5f, -1,0,0,
            -0.5f, -0.5f, -0.5f,  -1,0,0,
            -0.5f, -0.5f,  0.5f, -1,0,0,

            -0.5f,  0.17f,  0.5f,  -1,0,0,
            -0.5f,  0.17f, -0.5f, -1,0,0,
            -0.5f, -0.17f, -0.5f,  -1,0,0,
            -0.5f, -0.17f,  0.5f, -1,0,0,

            -0.5f,  0.5f,  0.5f,  -1,0,0,
            -0.5f,  0.5f, -0.5f, -1,0,0,
            -0.5f,  0.17f, -0.5f,  -1,0,0,
            -0.5f,  0.17f,  0.5f, -1,0,0,


             0.5f,  -0.17f,  0.5f, 1,0,0,
             0.5f,  -0.17f, -0.5f,  1,0,0,
             0.5f, -0.5f, -0.5f, 1,0,0,
             0.5f, -0.5f,  0.5f,  1,0,0,

             0.5f,  0.17f,  0.5f, 1,0,0,
             0.5f,  0.17f, -0.5f,  1,0,0,
             0.5f, -0.17f, -0.5f, 1,0,0,
             0.5f, -0.17f,  0.5f,  1,0,0,

             0.5f,  0.5f,  0.5f, 1,0,0,
             0.5f,  0.5f, -0.5f,  1,0,0,
             0.5f,  0.17f, -0.5f, 1,0,0,
             0.5f,  0.17f,  0.5f,  1,0,0,


            -0.5f, -0.5f, -0.5f,  0,-1,0,
             0.5f, -0.5f, -0.5f,  0,-1,0,
             0.5f, -0.5f,  -0.17f,  0,-1,0,
            -0.5f, -0.5f,  -0.17f,  0,-1,0,

             -0.5f, -0.5f, -0.17f,  0,-1,0,
             0.5f, -0.5f, -0.17f,  0,-1,0,
             0.5f, -0.5f,  0.17f,  0,-1,0,
            -0.5f, -0.5f,  0.17f,  0,-1,0,

             -0.5f, -0.5f, 0.17f,  0,-1,0,
             0.5f, -0.5f,  0.17f,  0,-1,0,
             0.5f, -0.5f,  0.5f,  0,-1,0,
            -0.5f, -0.5f,  0.5f,  0,-1,0,


            -0.5f,  0.5f, -0.5f,  0,1,0,
             -0.17f,  0.5f, -0.5f,  0,1,0,
             -0.17f,  0.5f,  0.5f,  0,1,0,
            -0.5f,  0.5f,  0.5f,  0,1,0,

            -0.17f,  0.5f, -0.5f,  0,1,0,
             0.17f,  0.5f, -0.5f,  0,1,0,
             0.17f,  0.5f,  0.5f,  0,1,0,
            -0.17f,  0.5f,  0.5f,  0,1,0,

            0.17f,  0.5f, -0.5f,  0,1,0,
             0.5f,  0.5f, -0.5f,  0,1,0,
             0.5f,  0.5f,  0.5f,  0,1,0,
            0.17f,  0.5f,  0.5f,  0,1,0,
        };
        public readonly float[] WholeVertices =
{
            -0.5f, -0.5f, -0.5f, 0,0,-1,
             0.5f, -0.5f, -0.5f, 0,0,-1,
             0.5f,  0.5f, -0.5f, 0,0,-1,
             0.5f,  0.5f, -0.5f, 0,0,-1,
            -0.5f,  0.5f, -0.5f, 0,0,-1,
            -0.5f, -0.5f, -0.5f, 0,0,-1,

            -0.5f, -0.5f,  0.5f,  0,0,1,
             0.5f, -0.5f,  0.5f,  0,0,1,
             0.5f,  0.5f,  0.5f,  0,0,1,
             0.5f,  0.5f,  0.5f,  0,0,1,
            -0.5f,  0.5f,  0.5f,  0,0,1,
            -0.5f, -0.5f,  0.5f,  0,0,1,

            -0.5f,  0.5f,  0.5f,  -1,0,0,
            -0.5f,  0.5f, -0.5f, -1,0,0,
            -0.5f, -0.5f, -0.5f,  -1,0,0,
            -0.5f, -0.5f, -0.5f,  -1,0,0,
            -0.5f, -0.5f,  0.5f, -1,0,0,
            -0.5f,  0.5f,  0.5f,  -1,0,0,

             0.5f,  0.5f,  0.5f, 1,0,0,
             0.5f,  0.5f, -0.5f,  1,0,0,
             0.5f, -0.5f, -0.5f, 1,0,0,
             0.5f, -0.5f, -0.5f,  1,0,0,
             0.5f, -0.5f,  0.5f,  1,0,0,
             0.5f,  0.5f,  0.5f,  1,0,0,

            -0.5f, -0.5f, -0.5f,  0,-1,0,
             0.5f, -0.5f, -0.5f,  0,-1,0,
             0.5f, -0.5f,  0.5f,  0,-1,0,
             0.5f, -0.5f,  0.5f,  0,-1,0,
            -0.5f, -0.5f,  0.5f,  0,-1,0,
            -0.5f, -0.5f, -0.5f,  0,-1,0,

            -0.5f,  0.5f, -0.5f,  0,1,0,
             0.5f,  0.5f, -0.5f,  0,1,0,
             0.5f,  0.5f,  0.5f,  0,1,0,
             0.5f,  0.5f,  0.5f,  0,1,0,
            -0.5f,  0.5f,  0.5f,  0,1,0,
            -0.5f,  0.5f, -0.5f,  0,1,0
        };
        public readonly uint[] WholeIndices =
        {
            0,1,2,3,4,5,
            6,7,8,9,10,11,
            12,13,14,15,16,17,
            18,19,20,21,22,23,
            24,25,26,27,28,29,
            30,31,32,33,34,35
        };
        public readonly uint[] indices;
        public readonly float[] vertices;
        public readonly uint[] SplitIndices = new uint[18*6];
        public Geometry(int type)
        {
            vertices = type == 0 ? WholeVertices : SplitVertices;
            indices = type == 0 ? WholeIndices : SplitIndices;
            if(type == 1)
            for(uint i=0;i<18;i++)
            {
                uint offset = 6 * i;
                indices[offset] = 4 * i;
                indices[offset + 1] = 4 * i + 1;
                indices[offset + 2] = 4 * i + 2;
                indices[offset + 3] = 4 * i;
                indices[offset + 4] = 4 * i + 2;
                indices[offset + 5] = 4 * i + 3;
            }
        }
    }
}
